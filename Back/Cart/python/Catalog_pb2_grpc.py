# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Catalog_pb2 as Catalog__pb2


class CatalogStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SeeProduct = channel.unary_unary(
                '/Catalog/SeeProduct',
                request_serializer=Catalog__pb2.ProductId.SerializeToString,
                response_deserializer=Catalog__pb2.TransactionResponse.FromString,
                )
        self.AddProduct = channel.unary_unary(
                '/Catalog/AddProduct',
                request_serializer=Catalog__pb2.Product.SerializeToString,
                response_deserializer=Catalog__pb2.TransactionResponse.FromString,
                )
        self.DeleteProduct = channel.unary_unary(
                '/Catalog/DeleteProduct',
                request_serializer=Catalog__pb2.ProductId.SerializeToString,
                response_deserializer=Catalog__pb2.TransactionResponse.FromString,
                )
        self.GetStock = channel.unary_unary(
                '/Catalog/GetStock',
                request_serializer=Catalog__pb2.ProductId.SerializeToString,
                response_deserializer=Catalog__pb2.Stock.FromString,
                )
        self.GetName = channel.unary_unary(
                '/Catalog/GetName',
                request_serializer=Catalog__pb2.ProductId.SerializeToString,
                response_deserializer=Catalog__pb2.ProductName.FromString,
                )
        self.AddQuantity = channel.unary_unary(
                '/Catalog/AddQuantity',
                request_serializer=Catalog__pb2.Stock.SerializeToString,
                response_deserializer=Catalog__pb2.TransactionResponse.FromString,
                )
        self.DeleteQuantity = channel.unary_unary(
                '/Catalog/DeleteQuantity',
                request_serializer=Catalog__pb2.Stock.SerializeToString,
                response_deserializer=Catalog__pb2.TransactionResponse.FromString,
                )


class CatalogServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SeeProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddQuantity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQuantity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CatalogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SeeProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.SeeProduct,
                    request_deserializer=Catalog__pb2.ProductId.FromString,
                    response_serializer=Catalog__pb2.TransactionResponse.SerializeToString,
            ),
            'AddProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProduct,
                    request_deserializer=Catalog__pb2.Product.FromString,
                    response_serializer=Catalog__pb2.TransactionResponse.SerializeToString,
            ),
            'DeleteProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProduct,
                    request_deserializer=Catalog__pb2.ProductId.FromString,
                    response_serializer=Catalog__pb2.TransactionResponse.SerializeToString,
            ),
            'GetStock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStock,
                    request_deserializer=Catalog__pb2.ProductId.FromString,
                    response_serializer=Catalog__pb2.Stock.SerializeToString,
            ),
            'GetName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetName,
                    request_deserializer=Catalog__pb2.ProductId.FromString,
                    response_serializer=Catalog__pb2.ProductName.SerializeToString,
            ),
            'AddQuantity': grpc.unary_unary_rpc_method_handler(
                    servicer.AddQuantity,
                    request_deserializer=Catalog__pb2.Stock.FromString,
                    response_serializer=Catalog__pb2.TransactionResponse.SerializeToString,
            ),
            'DeleteQuantity': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQuantity,
                    request_deserializer=Catalog__pb2.Stock.FromString,
                    response_serializer=Catalog__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Catalog', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Catalog(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SeeProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/SeeProduct',
            Catalog__pb2.ProductId.SerializeToString,
            Catalog__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/AddProduct',
            Catalog__pb2.Product.SerializeToString,
            Catalog__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/DeleteProduct',
            Catalog__pb2.ProductId.SerializeToString,
            Catalog__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/GetStock',
            Catalog__pb2.ProductId.SerializeToString,
            Catalog__pb2.Stock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/GetName',
            Catalog__pb2.ProductId.SerializeToString,
            Catalog__pb2.ProductName.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddQuantity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/AddQuantity',
            Catalog__pb2.Stock.SerializeToString,
            Catalog__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteQuantity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Catalog/DeleteQuantity',
            Catalog__pb2.Stock.SerializeToString,
            Catalog__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
