// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: helloworld/Cart.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	AddToCart(ctx context.Context, in *Pedido, opts ...grpc.CallOption) (*Response, error)
	RemoveFromCart(ctx context.Context, in *PedidoId, opts ...grpc.CallOption) (*Response, error)
	ViewCart(ctx context.Context, in *Nada, opts ...grpc.CallOption) (*Response, error)
	ViewProductInCart(ctx context.Context, in *ProductoId, opts ...grpc.CallOption) (*Response, error)
	AddQuantity(ctx context.Context, in *PedidoId, opts ...grpc.CallOption) (*Response, error)
	GetCarLength(ctx context.Context, in *Nada, opts ...grpc.CallOption) (*Length, error)
	GetPrecio(ctx context.Context, in *PedidoId, opts ...grpc.CallOption) (*Precio, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) AddToCart(ctx context.Context, in *Pedido, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Cart/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) RemoveFromCart(ctx context.Context, in *PedidoId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Cart/RemoveFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ViewCart(ctx context.Context, in *Nada, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Cart/ViewCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ViewProductInCart(ctx context.Context, in *ProductoId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Cart/ViewProductInCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) AddQuantity(ctx context.Context, in *PedidoId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Cart/AddQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) GetCarLength(ctx context.Context, in *Nada, opts ...grpc.CallOption) (*Length, error) {
	out := new(Length)
	err := c.cc.Invoke(ctx, "/Cart/GetCarLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) GetPrecio(ctx context.Context, in *PedidoId, opts ...grpc.CallOption) (*Precio, error) {
	out := new(Precio)
	err := c.cc.Invoke(ctx, "/Cart/GetPrecio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	AddToCart(context.Context, *Pedido) (*Response, error)
	RemoveFromCart(context.Context, *PedidoId) (*Response, error)
	ViewCart(context.Context, *Nada) (*Response, error)
	ViewProductInCart(context.Context, *ProductoId) (*Response, error)
	AddQuantity(context.Context, *PedidoId) (*Response, error)
	GetCarLength(context.Context, *Nada) (*Length, error)
	GetPrecio(context.Context, *PedidoId) (*Precio, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) AddToCart(context.Context, *Pedido) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCartServer) RemoveFromCart(context.Context, *PedidoId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromCart not implemented")
}
func (UnimplementedCartServer) ViewCart(context.Context, *Nada) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewCart not implemented")
}
func (UnimplementedCartServer) ViewProductInCart(context.Context, *ProductoId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewProductInCart not implemented")
}
func (UnimplementedCartServer) AddQuantity(context.Context, *PedidoId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuantity not implemented")
}
func (UnimplementedCartServer) GetCarLength(context.Context, *Nada) (*Length, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarLength not implemented")
}
func (UnimplementedCartServer) GetPrecio(context.Context, *PedidoId) (*Precio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrecio not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pedido)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cart/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).AddToCart(ctx, req.(*Pedido))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedidoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cart/RemoveFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).RemoveFromCart(ctx, req.(*PedidoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ViewCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ViewCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cart/ViewCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ViewCart(ctx, req.(*Nada))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ViewProductInCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ViewProductInCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cart/ViewProductInCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ViewProductInCart(ctx, req.(*ProductoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_AddQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedidoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).AddQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cart/AddQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).AddQuantity(ctx, req.(*PedidoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_GetCarLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).GetCarLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cart/GetCarLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).GetCarLength(ctx, req.(*Nada))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_GetPrecio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PedidoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).GetPrecio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cart/GetPrecio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).GetPrecio(ctx, req.(*PedidoId))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCart",
			Handler:    _Cart_AddToCart_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _Cart_RemoveFromCart_Handler,
		},
		{
			MethodName: "ViewCart",
			Handler:    _Cart_ViewCart_Handler,
		},
		{
			MethodName: "ViewProductInCart",
			Handler:    _Cart_ViewProductInCart_Handler,
		},
		{
			MethodName: "AddQuantity",
			Handler:    _Cart_AddQuantity_Handler,
		},
		{
			MethodName: "GetCarLength",
			Handler:    _Cart_GetCarLength_Handler,
		},
		{
			MethodName: "GetPrecio",
			Handler:    _Cart_GetPrecio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/Cart.proto",
}
